IP DROPLET DIGITAL OCEAN:  24.199.106.186

Pendientes:
- cambiar fecha_renovacion (editar EmpresaDB)
- cambiar numero de usuarios autorizados en Empresa.num_usuarios
- cambiar password (olvide contrase√±a principal)
- .env cambio en DEBUG
- Vendedores - no carga la fecha registro al iniciar


git clone https://github.com/msotomx/web.git
COLOR AZUL:  navy:'#0D3B66'

FACTURAS
- validar que no se repita numero de factura
- buscar facturas por cliente
- opcion de enviar por email
CLIENTES:
- agregar 3 email en el cliente
REPORTES
- agregar reporte por tipo de cliente
- existencia por categoria - todas





Concepto		Tabla			Vive en DB
Conexi√≥n a base		EmpresaDB		default
Usuario			User			default
Perfil de usuario	PerfilUsuario		default
Datos fiscales		Empresa	empresa_xxx 	(base del tenant)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin.settings.dev')

comando para buscar en los archivos:
 grep -r "lo que buscas" .
 grep -r "User =" .
 grep -r "sign_inicial" .
 grep -r "set_current_tenant_connection" .
 grep -r "request.session" .
 grep -r "0002_initial.py" .
1Ô∏è‚É£ 
Borra Manualmente las migraciones:
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc" -delete

En tu consola Django (python manage.py shell) ejecuta:

from core.services.tenant_setup import crear_tenant_test
crear_tenant_test("Cars Mas")
en NOMBRE DE EMPRESA: limitar el nombre a 30 caracteres (slug), agregar fecha de hoy en formato:YYYYMMAA
nombre de empresa= empresa_YYYYMMAA_slugy


==================================================
 grep -r "fetch" .

empresa = EmpresaDB.objects.get(pk=request.session['empresa_id'])
db_config = get_db_config_from_empresa(empresa)


BASES TENANT
67- paty
68- mike
69- jorge
4- karen
5- miguel


[21/Jul/2025 22:27:42] "GET /login/ HTTP/1.1" 200 7457                     <-- Se hace Login
[21/Jul/2025 22:27:50] "POST /login/ HTTP/1.1" 302 0
[21/Jul/2025 22:27:50] "GET /setup-tenant/?eid=72 HTTP/1.1" 302 0
[Middleware - Reconfigurar ..] actual_name: None			
[Middleware - Reconfigurar ..] nueva_config['NAME']: e_paty20250721	   <-- BD Nueva
[Middleware - Reconfigurar ..] Nueva conexi√≥n configurada a e_paty20250721 <-- Se hace la conexion, base correcta
[Middleware - empresa_f] mike						   <-- Empresa Fiscal es incorrecta
[Middleware] Base realmente conectada: e_mike20250721			   <-- Base Real es incorrecta
[Middleware] EmpresaDB.db_name e_paty20250721				   <-- Esta es la base correcta
[Middleware] Empresa.db_name e_mike20250721				   <-- Empresa Fiscal incorrecta
ENTRANDO A  INICIO							<-- aqui en inicio se despliega el nombre de la empresa "mike" que es incorrecto
EN INICIO- empresa_id: 72
A continuacion selecciono una opcion del menu:
[Middleware - Reconfigurar ..] actual_name: e_paty20250721                 <-- sale de: actual_name = connections.databases.get(alias, {}).get('NAME')
[Middleware - Reconfigurar ..] nueva_config['NAME']: e_paty20250721
[Middleware - empresa_f] paty						   <-- aqui ya se accesa a la empresa fiscal correcta
[Middleware] Base realmente conectada: e_paty20250721			   <-- Base Real correcta
[Middleware] EmpresaDB.db_name e_paty20250721				   <-- Base Default apunta a Base Tenant Correcta
[Middleware] Empresa.db_name e_paty20250721				   <-- Empresa Fiscal Correcta y se despliega el nombre de la empresa correcto en pantalla
[TenantRequiredMixin] db_name: tenant
[TenantRequiredMixin] empresa_id: 72
[TenantRequiredMixin] empresa_fiscal: paty
üîÑ Estableciendo conexi√≥n con la base de datos tenant
[Set_Current_Tenant_Connection] 
[Set_Current_Tenant_Connection] empresa_id: 72
‚ÑπÔ∏è Conexi√≥n 'tenant' ya registrada
La conexi√≥n 'tenant' est√° activa con la base: e_paty20250721
[Set_Current_Tenant_Connection] empresa_fiscal: paty
[21/Jul/2025 22:29:36] "GET /inv/proveedores/ HTTP/1.1" 200 7257


python manage.py migrate cxc --database=default

1) Mostrar Empresas Registradas 
2) Timbres Disponibles por empresa 
3) Timbres asignados por fecha 
4) Empresas por Fecha de Renovacion

Elabora el template y vista "Precio", en este modulo vamos a mostrar 2 opciones de precio:
1) Paquete Premium  $499
   - menos de $42 pesos por mes
   - Pago Anual
   - incluye todas las opciones del sistema
   - compras, ventas, cotizaciones, facturacion electronica,movimientos por cliente, por proveedor
   - 100% en la nube
   - 30 dias para probar y conocer el sistema
   - soporte via whatsapp
   - el pago se realiza dentro de 30 dias
   - el cliente se compromete a enviar un video de 20 segundos con su experiencia con el sistema
        deberas indicar: nombre, nombre de tu empresa, ciudad donde se ubica y comentarios

2) Paquete Platino $699
   - menos de $60 pesos por mes
   - Pago Anual
   - incluye todas las opciones del sistema
   - compras, ventas, cotizaciones, facturacion electronica,movimientos por cliente, por proveedor
   - 100% en la nube
   - 30 dias para probar y conocer el sistema
   - soporte via whatsapp (en caso de ocupar)
   - el pago se realiza dentro de 30 dias



from django.core.mail import EmailMessage
from django.conf import settings

print("Usando backend:", settings.EMAIL_BACKEND)
print("From:", settings.DEFAULT_FROM_EMAIL)
print("SMTP Host:", settings.EMAIL_HOST)

msg = EmailMessage(
    subject="‚úÖ Prueba Amazon SES Producci√≥n",
    body="Hola!\n\nEste es un correo de prueba enviado desde Django usando Amazon SES (SMTP, producci√≥n).",
    from_email=settings.DEFAULT_FROM_EMAIL,
    to=["msoto.stop@gmail.com"],
    headers={"Reply-To": settings.REPLY_TO_EMAIL}
)

try:
    result = msg.send()
    print("Resultado:", result)
    if result == 1:
        print("‚úÖ SES acept√≥ el correo. Revisa tu bandeja de entrada.")
    else:
        print("‚ö†Ô∏è No se envi√≥ el correo.")
except Exception as e:
    print("‚ùå Error al enviar:", str(e))
