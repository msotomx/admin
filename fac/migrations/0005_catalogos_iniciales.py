# Generated by Django 4.2 on 2025-05-29 14:44

from django.db import migrations

def cargar_catalogos(apps, schema_editor):
    FormaPago = apps.get_model('fac', 'FormaPago')
    MetodoPago = apps.get_model('fac', 'MetodoPago')
    UsoCfdi = apps.get_model('fac', 'UsoCfdi')
    RegimenFiscal = apps.get_model('cxc', 'RegimenFiscal')
    UnidadMedida = apps.get_model('inv', 'UnidadMedida')
    ClaveMovimiento = apps.get_model('inv', 'ClaveMovimiento')
    TipoCliente = apps.get_model('cxc', 'TipoCliente')
    TipoComprobante = apps.get_model('fac', 'TipoComprobante')
    Exportacion = apps.get_model('fac', 'Exportacion')
    Moneda = apps.get_model('inv', 'Moneda')
        
    formas_pago = [
        ('01', 'Efectivo'),
        ('02', 'Cheque nominativo'),
        ('03', 'Transferencia electrónica de fondos'),
        ('04', 'Tarjeta de crédito'),
        ('05', 'Monedero electrónico'),
        ('06', 'Dinero electrónico'),
        ('08', 'Vales de despensa'), 
        ('12', 'Dación en pago'),
        ('13', 'Pago por subrogación'),
        ('14', 'Pago por consignación'),
        ('15', 'Condonación'),
        ('17', 'Compensación'),
        ('23', 'Novación'),
        ('24', 'Confusión'),
        ('25', 'Remisión de deuda'),
        ('26', 'Prescripción o caducidad'),
        ('27', 'Satisfacción del acreedor'),
        ('28', 'Tarjeta de débito'),
        ('29', 'Tarjeta de servicios'),
        ('30', 'Aplicación de anticipos'),
        ('31', 'Intemediario pagos'),
        ('99', 'Por definir'),
    ]

    metodos_pago = [
        ('PUE', 'Pago en una sola exhibición'),
        ('PPD', 'Pago en parcialidades o diferido'),
    ]
    
    usos_cfdi = [
        ('G01', 'Adquisición de mercancías'),
        ('G02', 'Devoluciones, descuentos o bonificaciones.'),
        ('G03', 'Gastos en general'),
        ('D01', 'Honorarios médicos, dentales y gastos hospitalarios'),
        ('D02', 'Gastos médicos por incapacidad o discapacidad'),
        ('D03', 'Gastos funerales'),
        ('D04', 'Donativos'),
        ('D05', 'Intereses reales efectivamente pagados por créditos hipotecarios (casa habitación)'),
        ('D06', 'Aportaciones voluntarias al SAR'),
        ('D07', 'Primas por seguros de gastos médicos'),
        ('D08', 'Gastos de transportación escolar obligatoria'),
        ('D09', 'Depósitos en cuentas para el ahorro, primas que tengan como base planes de pensiones'),
        ('D10', 'Pagos por servicios educativos (colegiaturas)'),
        ('I01', 'Construcciones'),
        ('I02', 'Mobiliario y equipo de oficina por inversiones'),
        ('I03', 'Equipo de transporte'),
        ('I04', 'Equipo de computo y accesorios'),
        ('I05', 'Dados, troqueles, moldes, matrices y herramental'),
        ('I06', 'Comunicaciones telefónicas'),
        ('I07', 'Comunicaciones satelitales'),
        ('I08', 'Otra maquinaria y equipo'),
        ('S01', 'Sin efectos fiscales'),
        ('P01', 'Por definir'),
    ]

    regimen_fiscal = [
        ('601', 'General de Ley Personas Morales'),
        ('603', 'Personas Morales con Fines no Lucrativos'),
        ('605', 'Sueldos y Salarios e Ingresos Asimilados a Salarios'),
        ('606', 'Arrendamiento'),
        ('607', 'Régimen de Enajenación o Adquisición de Bienes'),
        ('608', 'Demás ingresos'),
        ('610', 'Residentes en el Extranjero sin Establecimiento Permanente en México'),
        ('611', 'Ingresos por Dividendos (socios y accionistas)'),
        ('612', 'Personas Físicas con Actividades Empresariales y Profesionales'),
        ('614', 'Ingresos por intereses'),
        ('615', 'Régimen de los ingresos por obtención de premios'),
        ('616', 'Sin obligaciones fiscales'),
        ('620', 'Sociedades Cooperativas de Producción que optan por diferir sus ingresos'),
        ('621', 'Incorporación Fiscal'),
        ('622', 'Actividades Agrícolas, Ganaderas, Silvícolas y Pesqueras'),
        ('623', 'Opcional para Grupos de Sociedades'),
        ('624', 'Coordinados'),
        ('625', 'Régimen de las Actividades Empresariales con ingresos a través de Plataformas Tecnológicas'),
        ('626', 'Régimen Simplificado de Confianza'),
    ]

    unidades = [
        ('H87', 'Pieza'),
        ('E48', 'Unidad de servicio'),
        ('KGM', 'Kilogramo'),
        ('LTR', 'Litro'),
        ('MTR', 'Metro'),
    ]

    compras = [
        ('CO', 'COMPRAS','E'),
    ]
    
    tipos_cliente = [
        ('01','CONTADO'),
    ]

    exportaciones = [
        ('01','SI'),
    ]

    tipos_comprobante = [
        ('I','INGRESO'),
        ('E','EGRESO'),
        ('T','TRASLADO'),
    ]

    monedas = [
        ('MXN','PESO MEXICANO','$', True, 1),
    ]

    for clave, nombre in formas_pago:
        FormaPago.objects.get_or_create(forma_pago=clave, nombre=nombre)
    for clave, nombre in metodos_pago:
        MetodoPago.objects.get_or_create(metodo_pago=clave, nombre=nombre)
    for clave, descripcion in usos_cfdi:
        UsoCfdi.objects.get_or_create(uso_cfdi=clave, nombre=descripcion)
    for clave, nombre in regimen_fiscal:
        RegimenFiscal.objects.get_or_create(regimen_fiscal=clave, nombre=nombre)
    for clave, nombre in unidades:
        UnidadMedida.objects.get_or_create(unidad_medida=clave, descripcion=nombre)
    for clave, nombre, tipo in compras:
        ClaveMovimiento.objects.get_or_create(clave_movimiento=clave, nombre=nombre, tipo=tipo)
    for clave, nombre in tipos_cliente:
        TipoCliente.objects.get_or_create(tipo_cliente=clave, nombre=nombre)
    for clave, nombre in tipos_comprobante:
        TipoComprobante.objects.get_or_create(tipo_comprobante=clave, nombre=nombre)
    for clave, nombre in exportaciones:
        Exportacion.objects.get_or_create(exportacion=clave, nombre=nombre)
    for clave, nombre, simbolo, activa, paridad in monedas:
        Moneda.objects.get_or_create(clave=clave, nombre=nombre, simbolo=simbolo, activa=activa, paridad=paridad)

class Migration(migrations.Migration):

    dependencies = [
        ('fac', '0004_remove_factura_status_alter_factura_estatus'),  # ultimo archivo en fac/migrations
        ('cxc', '0003_alter_regimenfiscal_nombre'),  # ultimo archivo en cxc/migrations
        ('inv', '0003_rename_unidad_de_medida_producto_unidad_medida'),  # ultimo archivo en inv/migrations
    ]

    operations = [
        migrations.RunPython(cargar_catalogos),
    ]
